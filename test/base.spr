namespace scalgoprototest;

enum MyEnum {
	a, b, c, d
}

/**
 * Simple struct used for testing
 */
struct MyStruct {
	x: U32;
	y: F32;
	z: Bool;
}

struct FullStruct {
	e: MyEnum;
	s: MyStruct;
	b: Bool;
	u8: U8;
	u16: U16;
	u32: U32;
	u64: U64;
	i8: I8;
	i16: I16;
	i32: I32;
	i64: I64;
	f: F32;
	d: F64;
}

/**
 * Simple table used for testing
 *
 * Hey there
 */
table Simple @F0606B0B {
	/** My enum */
	e: MyEnum;
	s: FullStruct;
	b: Bool;
	u8: U8 = 2;
	u16: U16 = 3;
	u32: U32 = 4;
	u64: U64 = 5;
	i8: I8 = 6;
	i16: I16 = 7;
	i32: I32 = 8;
	i64: I64 = 9;
	f: F32 = 10;
	d: F64 = 11;

	os: optional MyStruct;
	ob: optional Bool;
	ou8: optional U8;
	ou16: optional U16;
	ou32: optional U32;
	ou64: optional U64;
	oi8: optional I8;
	oi16: optional I16;
	oi32: optional I32;
	oi64: optional I64;
	of: optional F32;
	od: optional F64;

	ne: MyEnum;
	ns: optional MyStruct;
	nb: optional Bool;
	nu8: optional U8;
	nu16: optional U16;
	nu32: optional U32;
	nu64: optional U64;
	ni8: optional I8;
	ni16: optional I16;
	ni32: optional I32;
	ni64: optional I64;
	nf: optional F32;
	nd: optional F64;
}

table Member @836DE498 {
	id: I16;
}

table MyMemberList @70B0A9F1 {
	members: direct list Member;
	help: list U32;
}

table Complex @CCDD589C {
	member: optional Member;
	nmember: optional Member;
	text: optional Text;
	myBytes: optional Bytes;
	ntext: optional Text;
	nbytes: optional Bytes;
	intList: optional list I32;
	nintList: optional list I32;
	enumList: optional list MyEnum;
	structList: optional list MyStruct;
	textList: optional list Text;
	bytesList: optional list Bytes;
	memberList: optional list Member;
	directMemberList: optional direct list Member;
	f32list: optional list F32;
	f64list: optional list F64;
	u8list: optional list U8;
	blist: optional list Bool;
}

table Complex3 @CCDD589C { // Note that this has the same magic as Complex, as it is compatible, the only difference is how it is read.
	member: Member;
	nmember: Member;
	text: Text;
	myBytes: Bytes;
	ntext: Text;
	nbytes: Bytes;
	intList: list I32;
	nintList: list I32;
	enumList: list MyEnum;
	structList: list MyStruct;
	textList: list Text;
	bytesList: list Bytes;
	memberList: list Member;
	directMemberList: direct list Member;
	f32list: list F32;
	f64list: list F64;
	u8list: list U8;
	blist: list Bool;
}

table InplaceList @793045DD {
	id: I32;
	l: optional inplace list I32;
}

table InplaceText @DC784D79 {
	id: I32;
	t: optional inplace Text;
}

table InplaceBytes @259A2E79 {
	id: I32;
	b: optional inplace Bytes;
}

table InplaceUnion @944099A8 {
	id: I32;
	u: optional inplace union {
		monkey {
			name: optional Text;
		};
		text: InplaceText;
		empty {};
	}
}

table InplaceRoot @971A3362 {
	u: optional InplaceUnion;
	u2: optional InplaceUnion;
	l: optional InplaceList;
	t: optional InplaceText;
	b: optional InplaceBytes;
}

table Gen1 @B4957DF9 {
	aa: I32;
}

table Gen2 @B4957DF9 {
	aa: I32;
	bb: I32 = 42;
	u : optional inplace union {
		 monkey {},
		cake {v:I32},
	}
	directMemberList : optional direct list Member;
	nullTable: MyMemberList;
}

table MemberV2 @836DE498 {
	id: I16;
	cookie: I32 = 37;
}

table Gen3 @B4957DF9 {
	aa: I32;
	bb: I32 = 42;

	u: optional inplace union {
		 monkey {},
		 cake {v:I32},
		 bat {}
	}

	directMemberList : optional direct list MemberV2;
	nullTable: MyMemberList;

	e: MyEnum = c;
	s: MyStruct;
	b: Bool;
	u8: U8 = 2;
	u16: U16 = 3;
	u32: U32 = 4;
	u64: U64 = 5;
	i8: I8 = 6;
	i16: I16 = 7;
	i32: I32 = 8;
	i64: I64 = 9;
	f: F32 = 10;
	d: F64 = 11;

	os: optional MyStruct;
	ob: optional Bool;
	ou8: optional U8;
	ou16: optional U16;
	ou32: optional U32;
	ou64: optional U64;
	oi8: optional I8;
	oi16: optional I16;
	oi32: optional I32;
	oi64: optional I64;
	of: optional F32;
	od: optional F64;

	member: optional Member;
	nmember: optional Member;
	text: optional Text;
	mbytes: optional Bytes;
	ntext: optional Text;
	nbytes: optional Bytes;
	intList: optional list I32;
	nintList: optional list I32;
	enumList: optional list MyEnum;
	structList: optional list MyStruct;
	textList: optional list Text;
	bytesList: optional list Bytes;
	memberList: optional list Member;
	missing: MyMemberList;
}

union NamedUnion {
	member: Member;
	text: Text;
	myBytes: Bytes;
	enumList: list enum {x, y, z};
}

